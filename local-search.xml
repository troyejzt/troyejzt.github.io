<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go神器 - Air</title>
    <link href="/2023/02/16/air/"/>
    <url>/2023/02/16/air/</url>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Air是为Go应用开发设计的另外一个热重载的命令行工具。只需在你的项目根目录下输入air，然后放在一边，专注于代码即可</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>推荐使用<strong>install.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">binary 文件会是在 $(go <span class="hljs-built_in">env</span> GOPATH)/bin/air</span><br>curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s -- -b $(go env GOPATH)/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者把它安装在 ./bin/ 路径下</span><br>curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s<br><br>air -v<br></code></pre></td></tr></table></figure><p>使用<code>go install</code></p><p>使用Go的版本为1.16或更高</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go install github.com/cosmtrek/air@latest<br></code></pre></td></tr></table></figure><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><p>进入项目文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /path/to/your_project<br></code></pre></td></tr></table></figure><p>运行以下命令初始化，把默认配置添加到当前路径下的<code>.air.toml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/./air init<br></code></pre></td></tr></table></figure><p>在这之后，只需要执行air命令，无需添加额外的变量，它就能使用<code>.air.toml</code>文件中的配置了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/./air<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gin学习记录 - 中间件</title>
    <link href="/2023/02/16/gin_4/"/>
    <url>/2023/02/16/gin_4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-全局中间件"><a href="#1-全局中间件" class="headerlink" title="1.全局中间件"></a>1.全局中间件</h2><ul><li>所有请求都经过这中间件</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// MiddleWare 定义中间件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MiddleWare</span><span class="hljs-params">()</span></span> gin.HandlerFunc &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      t := time.Now()<br>      fmt.Println(<span class="hljs-string">&quot;中间件开始执行了&quot;</span>)<br>      <span class="hljs-comment">// 设置变量到context的key中，可以通过Get()取</span><br>      c.Set(<span class="hljs-string">&quot;request&quot;</span>, <span class="hljs-string">&quot;中间件&quot;</span>)<br>      status := c.Writer.Status()<br>      fmt.Println(<span class="hljs-string">&quot;中间件执行完毕&quot;</span>, status)<br>      t2 := time.Since(t)<br>      fmt.Println(<span class="hljs-string">&quot;time:&quot;</span>, t2)<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.Use(MiddleWare())<br>   &#123;<br>      r.GET(<span class="hljs-string">&quot;/ce&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>         req, _ := c.Get(<span class="hljs-string">&quot;request&quot;</span>)<br>         fmt.Println(<span class="hljs-string">&quot;request:&quot;</span>, req)<br>         <span class="hljs-comment">//页面接收</span><br>         c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;request&quot;</span>: req&#125;)<br>      &#125;)<br>   &#125;<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="/../img/gin_4_1.png" alt="运行结果"></p><h2 id="2-局部中间件"><a href="#2-局部中间件" class="headerlink" title="2.局部中间件"></a>2.局部中间件</h2><ul><li>有的时候仅需要一些路由走指定的路由，可以将中间件放到注册位置</li><li>效果和全局一样，但是不用每个接口都走这个</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//局部中间键使用</span><br>  r.GET(<span class="hljs-string">&quot;/ce&quot;</span>, MiddleWare(), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      <span class="hljs-comment">// 取值</span><br>      req, _ := c.Get(<span class="hljs-string">&quot;request&quot;</span>)<br>      fmt.Println(<span class="hljs-string">&quot;request:&quot;</span>, req)<br>      <span class="hljs-comment">// 页面接收</span><br>      c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<span class="hljs-string">&quot;request&quot;</span>: req&#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><h2 id="3-练习"><a href="#3-练习" class="headerlink" title="3.练习"></a>3.练习</h2><ul><li>定义程序计时中间件，然后定义2个路由，执行函数后应该重新打印统计的执行时间</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myTime</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>   start := time.Now()<br>   c.Next()<br>   <span class="hljs-comment">// 统计时间</span><br>   since := time.Since(start)<br>   fmt.Println(<span class="hljs-string">&quot;程序用时:&quot;</span>, since)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.Use(myTime)<br>   shoppingGroup := r.Group(<span class="hljs-string">&quot;/shopping&quot;</span>)<br>   &#123;<br>      shoppingGroup.GET(<span class="hljs-string">&quot;/index&quot;</span>, shopIndexHandler)<br>      shoppingGroup.GET(<span class="hljs-string">&quot;/home&quot;</span>, shopHomeHandler)<br>   &#125;<br>   r.Run()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">shopIndexHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>   time.Sleep(<span class="hljs-number">5</span> * time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">shopHomeHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>   time.Sleep(<span class="hljs-number">3</span> * time.Second)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="/../img/gin_4_2.png" alt="运行结果"></p><h2 id="4-中间件推荐"><a href="#4-中间件推荐" class="headerlink" title="4.中间件推荐"></a>4.中间件推荐</h2><p><a href="https://github.com/gin-gonic/contrib/blob/master/README.md">中间件推荐</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gin学习记录 - 数据解析和绑定</title>
    <link href="/2023/02/16/gin_3/"/>
    <url>/2023/02/16/gin_3/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JSON数据解析和绑定"><a href="#1-JSON数据解析和绑定" class="headerlink" title="1.JSON数据解析和绑定"></a>1.JSON数据解析和绑定</h2><ul><li>客户端&#x2F;前端传参，后端接收并解析到结构体</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>   User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; binding:&quot;required&quot;`</span><br>   Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; binding:&quot;required&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">// 1.创建路由</span><br>   <span class="hljs-comment">// 默认使用 Logger()和 Recovery()</span><br>   r := gin.Default()<br>   <span class="hljs-comment">// Json绑定</span><br>   r.POST(<span class="hljs-string">&quot;loginJSON&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      <span class="hljs-comment">// 声明接收的变量</span><br>      <span class="hljs-keyword">var</span> json Login<br>      <span class="hljs-comment">// 将request的body中数据，自动按照json格式解析到结构体</span><br>      <span class="hljs-keyword">if</span> err := c.ShouldBindJSON(&amp;json); err != <span class="hljs-literal">nil</span> &#123;<br>         <span class="hljs-comment">// 返回错误信息</span><br>         <span class="hljs-comment">// gin.H封装了生成json数据的工具</span><br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 判断用户名密码是否正确</span><br>      <span class="hljs-keyword">if</span> json.User != <span class="hljs-string">&quot;root&quot;</span> || json.Password != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;304&quot;</span>&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>&#125;)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="/../img/gin_3_1.png" alt="效果"></p><h2 id="2-表单数据解析和绑定"><a href="#2-表单数据解析和绑定" class="headerlink" title="2.表单数据解析和绑定"></a>2.表单数据解析和绑定</h2><p>由于POST存在许多种Content-Type，因此不一定是通过Json方式传递</p><p>因此使用<code>context.Bind()</code>方式，gin会自动的识别content-type</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>   User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; binding:&quot;required&quot; form:&quot;username&quot;`</span><br>   Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; binding:&quot;required&quot; form:&quot;password&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">// 1.创建路由</span><br>   <span class="hljs-comment">// 默认使用 Logger()和 Recovery()</span><br>   r := gin.Default()<br>   r.POST(<span class="hljs-string">&quot;loginForm&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      <span class="hljs-keyword">var</span> form Login<br>      <span class="hljs-keyword">if</span> err := c.Bind(&amp;form); err != <span class="hljs-literal">nil</span> &#123;<br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 判断用户名密码是否正确</span><br>      <span class="hljs-keyword">if</span> form.User != <span class="hljs-string">&quot;root&quot;</span> || form.Password != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;304&quot;</span>&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>&#125;)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-URL数据解析和绑定"><a href="#3-URL数据解析和绑定" class="headerlink" title="3.URL数据解析和绑定"></a>3.URL数据解析和绑定</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Login <span class="hljs-keyword">struct</span> &#123;<br>   User     <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;user&quot; binding:&quot;required&quot; form:&quot;username&quot; uri:&quot;username&quot;`</span><br>   Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot; binding:&quot;required&quot; form:&quot;password&quot; uri:&quot;password&quot;`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">// 1.创建路由</span><br>   <span class="hljs-comment">// 默认使用 Logger()和 Recovery()</span><br>   r := gin.Default()<br><br>   r.POST(<span class="hljs-string">&quot;/:username/:password&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      <span class="hljs-keyword">var</span> login Login<br>      <span class="hljs-keyword">if</span> err := c.ShouldBindUri(&amp;login); err != <span class="hljs-literal">nil</span> &#123;<br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;error&quot;</span>: err.Error()&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 判断用户名密码是否正确</span><br>      <span class="hljs-keyword">if</span> login.User != <span class="hljs-string">&quot;root&quot;</span> || login.Password != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>         c.JSON(http.StatusBadRequest, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;304&quot;</span>&#125;)<br>         <span class="hljs-keyword">return</span><br>      &#125;<br>      c.JSON(http.StatusOK, gin.H&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;200&quot;</span>&#125;)<br>   &#125;)<br>   r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:8080/root/admin</code>，即可返回正确的response</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gin学习记录 - 路由</title>
    <link href="/2023/02/15/gin_2/"/>
    <url>/2023/02/15/gin_2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本路由"><a href="#1-基本路由" class="headerlink" title="1.基本路由"></a>1.基本路由</h2><ul><li>gin中的路由库是有httprouter做的<a class="btn" href="https://github.com/julienschmidt/httprouter"  target="_blank">点此跳转</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      c.String(http.StatusOK, <span class="hljs-string">&quot;Hello World!&quot;</span>)<br>   &#125;)<br>   r.POST(<span class="hljs-string">&quot;/xxxpost&quot;</span>, getting)<br>   r.PUT(<span class="hljs-string">&quot;/xxput&quot;</span>)<br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-Restful风格API"><a href="#2-Restful风格API" class="headerlink" title="2.Restful风格API"></a>2.Restful风格API</h2><p>gin支持Restful风格API，示例如下：</p><ol><li>获取文章信息 <code>/blog/getxxx -&gt; GET blog/xxx</code></li><li>添加<code> /blog/addxxx -&gt; POST blog/xxx</code></li><li>获取文章信息<code> /blog/updatexxx -&gt; PUT blog/xxx</code></li><li>获取文章信息 <code>/blog/delxxx -&gt; DELETE blog/xxx</code></li></ol><h2 id="3-API参数"><a href="#3-API参数" class="headerlink" title="3.API参数"></a>3.API参数</h2><ul><li>可以通过Context的Param方法来获取API参数</li><li>举例：比如现在有个api为 <code>localhost:8080/zhangsan/drink</code>，也有api为<code>localhost:8080/lisi/eat</code><ul><li>他们有相同共性，形式为 &#x2F;:name&#x2F;*action</li><li>可以通过获取api参数来获得name和action</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/user/:name/*action&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>      name := context.Param(<span class="hljs-string">&quot;name&quot;</span>)<br>      action := context.Param(<span class="hljs-string">&quot;action&quot;</span>)<br>      <span class="hljs-comment">// 截取</span><br>      action = strings.Trim(action, <span class="hljs-string">&quot;/&quot;</span>)<br>      context.String(http.StatusOK, name+<span class="hljs-string">&quot; is &quot;</span>+action)<br>   &#125;)<br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-URL参数"><a href="#4-URL参数" class="headerlink" title="4.URL参数"></a>4.URL参数</h2><ul><li>URL参数可以用过<code>DefaultQuery()</code>或者<code>Query()</code>获取</li><li><code>DefaultQuery()</code>若参数不存在，返回默认值，<code>Query()</code>若不存在，返回空串</li><li>示例<code>http://localhost:8080/hello?name=xxx</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>      <span class="hljs-comment">// 指定默认值</span><br>      <span class="hljs-comment">// http://localhost:8080/user 才会打印出来默认值</span><br>      name := context.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;troye&quot;</span>)<br>      context.String(http.StatusOK,fmt.Sprintf(<span class="hljs-string">&quot;hello %s&quot;</span>,name))<br>   &#125;)<br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-表单参数"><a href="#5-表单参数" class="headerlink" title="5.表单参数"></a>5.表单参数</h2><ul><li>如果请求为POST，http传输格式有四种：<ul><li>application&#x2F;json</li><li>application&#x2F;x-www-form-unlencoded</li><li>application&#x2F;xml</li><li>application&#x2F;form-data</li></ul></li><li>表单参数可以通过<code>PostForm()</code>获取，该方法默认解析的是x-www-form-unlencoded或form-data格式的参数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/form&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>   types := context.DefaultPostForm(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>)<br>   username := context.PostForm(<span class="hljs-string">&quot;username&quot;</span>)<br>   password := context.PostForm(<span class="hljs-string">&quot;password&quot;</span>)<br><br>   context.String(http.StatusOK, fmt.Sprintf(<span class="hljs-string">&quot;username: %s, password: %s, type: %s&quot;</span>, username, password, types))<br>&#125;)<br></code></pre></td></tr></table></figure><p>用Postman &#x2F; ApiFox调试一下<br><img src="/../img/gin_2_1.png" alt="post结果"></p><h2 id="6-上传单个文件"><a href="#6-上传单个文件" class="headerlink" title="6.上传单个文件"></a>6.上传单个文件</h2><h3 id="上传普通文件"><a href="#上传普通文件" class="headerlink" title="上传普通文件"></a>上传普通文件</h3><ul><li><strong>multipart&#x2F;form-data</strong>格式用于文件上传</li><li>gin文件上传与原生的net&#x2F;http方法类似，不同在于gin把request封装在<strong>context.Request</strong>中</li></ul><p>写一个简单前端页面，包含文件上传和提交功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    上传文件:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>   file, err := context.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      context.String(<span class="hljs-number">500</span>,<span class="hljs-string">&quot;上传图片出错&quot;</span>)<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   context.SaveUploadedFile(file,file.Filename)<br>   context.String(http.StatusOK,file.Filename)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>效果演示：</strong></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../img/gin_2_3.png" alt="文件上传"></div><div class="group-image-wrap"><img src="/../img/gin_2_2.png" alt="upload效果"></div></div></div><h3 id="上传特定文件"><a href="#上传特定文件" class="headerlink" title="上传特定文件"></a>上传特定文件</h3><p>如果想要限制上传文件的类型以及大小，但是gin目前暂时没有这些函数，所以基于原生写法写一个可以限制大小以及文件类型的上传函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go">r.POST(<span class="hljs-string">&quot;/upload&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;<br>   _, headers, err := context.Request.FormFile(<span class="hljs-string">&quot;file&quot;</span>)<br>   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      log.Printf(<span class="hljs-string">&quot;Error when try to get file: %v&quot;</span>, err)<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-comment">// headers.Size获取文件大小</span><br>   fmt.Println(headers.Size)<br>   <span class="hljs-keyword">if</span> headers.Size &gt; <span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">2</span> &#123;<br>      fmt.Println(<span class="hljs-string">&quot;文件太大了&quot;</span>)<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   <span class="hljs-comment">// headers.Header.Get(&quot;Content-Type&quot;)获取上传文件的类型</span><br>   <span class="hljs-keyword">if</span> headers.Header.Get(<span class="hljs-string">&quot;Content-Type&quot;</span>) != <span class="hljs-string">&quot;image/png&quot;</span> &#123;<br>      fmt.Println(<span class="hljs-string">&quot;只允许上传png图片&quot;</span>)<br>      <span class="hljs-keyword">return</span><br>   &#125;<br>   context.SaveUploadedFile(headers, <span class="hljs-string">&quot;./img/&quot;</span>+headers.Filename)<br>   context.String(http.StatusOK, headers.Filename)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="7-Routes-Group"><a href="#7-Routes-Group" class="headerlink" title="7. Routes Group"></a>7. Routes Group</h2><ul><li>Routes Group是为了管理一些相同的URL</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   v1 := r.Group(<span class="hljs-string">&quot;/v1&quot;</span>)<br>   &#123;<br>      v1.GET(<span class="hljs-string">&quot;/login&quot;</span>, login)<br>      v1.GET(<span class="hljs-string">&quot;/submit&quot;</span>, submit)<br>   &#125;<br>   v2 := r.Group(<span class="hljs-string">&quot;/v2&quot;</span>)<br>   &#123;<br>      v2.POST(<span class="hljs-string">&quot;/login&quot;</span>, login)<br>      v2.POST(<span class="hljs-string">&quot;/submit&quot;</span>, submit)<br>   &#125;<br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-路由注册与拆分"><a href="#8-路由注册与拆分" class="headerlink" title="8.路由注册与拆分"></a>8.路由注册与拆分</h2><h3 id="1-基本的路由注册"><a href="#1-基本的路由注册" class="headerlink" title="1.基本的路由注册"></a>1.基本的路由注册</h3><p>下面是最基础的gin路由注册方式，适用于路由比较少的简单项目或者demo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/topgoer&quot;</span>,helloHandler)<br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">helloHandler</span><span class="hljs-params">(c *gin.Context)</span></span>  &#123;<br>   c.JSON(http.StatusOK,gin.H&#123;<br>      <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello www.topgoer.com&quot;</span>,<br>   &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-路由拆分成单独文件或包"><a href="#2-路由拆分成单独文件或包" class="headerlink" title="2.路由拆分成单独文件或包"></a>2.路由拆分成单独文件或包</h3><p>当项目规模增大后，就不适合在main.go文件中去实现路由注册相关逻辑了，更倾向于把路由部分代码拆分出来，形成一个单独的文件或包</p><p>在routers.go文件中定义并注册路由信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>   <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">helloHandler</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>   c.JSON(http.StatusOK, gin.H&#123;<br>      <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello www.topgoer.com&quot;</span>,<br>   &#125;)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setRouter</span><span class="hljs-params">()</span></span> *gin.Engine &#123;<br>   r := gin.Default()<br>   r.GET(<span class="hljs-string">&quot;/topgoer&quot;</span>, helloHandler)<br>   <span class="hljs-keyword">return</span> r<br>&#125;<br></code></pre></td></tr></table></figure><p>在main.go中调用定义好的setupRouter函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := setupRouter()<br>    <span class="hljs-keyword">if</span> err := r.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;startup service failed, err:%v\n&quot;</span>, err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的目录结构：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">gin_demo<br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">sum</span><br>├── main.<span class="hljs-built_in">go</span><br>└── routers<br>    └── routers.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>PS:如果换package，函数名需要大写</p><h3 id="3-路由拆分成多个文件"><a href="#3-路由拆分成多个文件" class="headerlink" title="3.路由拆分成多个文件"></a>3.路由拆分成多个文件</h3><p>业务逐渐膨胀后，单独一个routers文件已经满足不了我们需求了</p><p>因此可以分开定义多个路由文件，例如：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">gin_demo<br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">sum</span><br>├── main.<span class="hljs-built_in">go</span><br>└── routers<br>    ├── blog.<span class="hljs-built_in">go</span><br>    └── shop.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>在每个router文件中都添加一个LoadXXX的函数，将相关路由注册到指定的路由器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LoadShop</span><span class="hljs-params">(e *gin.Engine)</span></span>  &#123;<br>    e.GET(<span class="hljs-string">&quot;/hello&quot;</span>, helloHandler)<br>    e.GET(<span class="hljs-string">&quot;/goods&quot;</span>, goodsHandler)<br>    e.GET(<span class="hljs-string">&quot;/checkout&quot;</span>, checkoutHandler)<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>最终main函数实现的注册逻辑如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    r := gin.Default()<br>    routers.LoadBlog(r)<br>    routers.LoadShop(r)<br>    <span class="hljs-keyword">if</span> err := r.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;startup service failed, err:%v\n&quot;</span>, err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-拆分到不同app"><a href="#4-拆分到不同app" class="headerlink" title="4.拆分到不同app"></a>4.拆分到不同app</h3><p>有时候项目规模实在太大，那么我们就更倾向于把业务拆分的更详细一些，例如把不同的业务代码拆分成不同的APP。</p><p>因此我们在项目目录下单独定义一个app目录，用来存放我们不同业务线的代码文件，这样就很容易进行横向扩展。大致目录结构如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs maxima">gin_demo<br>├── app<br>│   ├── blog<br>│   │   ├── handler.<span class="hljs-built_in">go</span><br>│   │   └── router.<span class="hljs-built_in">go</span><br>│   └── shop<br>│       ├── handler.<span class="hljs-built_in">go</span><br>│       └── router.<span class="hljs-built_in">go</span><br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">mod</span><br>├── <span class="hljs-built_in">go</span>.<span class="hljs-built_in">sum</span><br>├── main.<span class="hljs-built_in">go</span><br>└── routers<br>    └── routers.<span class="hljs-built_in">go</span><br></code></pre></td></tr></table></figure><p>其中app&#x2F;blog&#x2F;router.go用来定义post相关路由信息，具体内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Routers</span><span class="hljs-params">(e *gin.Engine)</span></span> &#123;<br>    e.GET(<span class="hljs-string">&quot;/post&quot;</span>, postHandler)<br>    e.GET(<span class="hljs-string">&quot;/comment&quot;</span>, commentHandler)<br>&#125;<br></code></pre></td></tr></table></figure><p>app&#x2F;shop&#x2F;router.go用来定义shop相关路由信息，具体内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Routers</span><span class="hljs-params">(e *gin.Engine)</span></span> &#123;<br>    e.GET(<span class="hljs-string">&quot;/goods&quot;</span>, goodsHandler)<br>    e.GET(<span class="hljs-string">&quot;/checkout&quot;</span>, checkoutHandler)<br>&#125;<br></code></pre></td></tr></table></figure><p>routers&#x2F;routers.go中根据需要定义Include函数用来注册子app中定义的路由，Init函数用来进行路由的初始化操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Option <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*gin.Engine)</span></span><br><br><span class="hljs-keyword">var</span> options = []Option&#123;&#125;<br><br><span class="hljs-comment">// 注册app的路由配置</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Include</span><span class="hljs-params">(opts ...Option)</span></span> &#123;<br>    options = <span class="hljs-built_in">append</span>(options, opts...)<br>&#125;<br><br><span class="hljs-comment">// 初始化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span> *gin.Engine &#123;<br>    r := gin.New()<br>    <span class="hljs-keyword">for</span> _, opt := <span class="hljs-keyword">range</span> options &#123;<br>        opt(r)<br>    &#125;<br>    <span class="hljs-keyword">return</span> r<br>&#125;<br></code></pre></td></tr></table></figure><p>main.go中按如下方式先注册子app中的路由，然后再进行路由的初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 加载多个APP的路由配置</span><br>    routers.Include(shop.Routers, blog.Routers)<br>    <span class="hljs-comment">// 初始化路由</span><br>    r := routers.Init()<br>    <span class="hljs-keyword">if</span> err := r.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;startup service failed, err:%v\n&quot;</span>, err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gin学习记录 - Hello World</title>
    <link href="/2023/02/15/gin_1/"/>
    <url>/2023/02/15/gin_1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1.介绍"></a>1.1.介绍</h2><ul><li>Gin是golang的微框架，具有快速灵活、容错方便等特点</li><li>web依赖远比Python和Java要小，自身的<code>net/http</code>足够简单，性能好</li><li>借助框架，减少很多封装带来的时间</li></ul><h2 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2.安装"></a>1.2.安装</h2><ol><li>使用下面的Go命令安装Gin</li></ol><blockquote><p>go get -u github.com&#x2F;gin-gonic&#x2F;gin</p></blockquote><ol start="2"><li>导入到代码中：</li></ol><blockquote><p>import “github.com&#x2F;gin-gonic&#x2F;gin”</p></blockquote><p><strong>环境变量配置：</strong></p><p>编辑<code>~/.bash_profile</code>文件，添加以下代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GOROOT=/usr/local/Cellar/go/1.10.3/libexec<br><br>export GOPATH=/Users/troye/workspace/Go<br><br>export GOBIN=<br><br>export PATH=$PATH:$&#123;GOPATH//://bin:&#125;/bin<br></code></pre></td></tr></table></figure><p>然后输入<code>go env</code>即可以看到当前Go环境变量</p><p><strong>IDE配置:</strong></p><p>创建新应用后也许会显示<code>GoPath is Empty</code>，这时打开Settings配置下workspace</p><p><img src="/../img/gin_1_1.png" alt="GoPath配置"></p><h2 id="1-3-示例"><a href="#1-3-示例" class="headerlink" title="1.3.示例"></a>1.3.示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>   <span class="hljs-string">&quot;net/http&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-comment">// 1. 创建路由</span><br>   r := gin.Default()<br>   <span class="hljs-comment">// 2. 绑定路由规则</span><br>   r.GET(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>      c.String(http.StatusOK,<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>   &#125;)<br>   <br>   <span class="hljs-comment">// 3. 监听端口，默认8080</span><br>   r.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行后，浏览器打开<code>http://localhost:8080/</code>即可看到下述结果</li></ul><p><img src="/../img/gin_1_2.png" alt="运行结果"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/13/hello-world/"/>
    <url>/2023/02/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
